version: 2.1
orbs:
  slack: circleci/slack@2.5.0
  aws-cli: circleci/aws-cli@4.1 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@9.0 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

# ------------------
#
# JOBS
#
# ------------------

jobs:
  build:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run:
          name: Create target tags
          command: |
            source .circleci/define_build_environment_variables
            echo "Created tags $TARGET_TAGS"
            echo "export BUILD_TAGS=$TARGET_TAGS" >> $BASH_ENV
            echo "export ECR_DEPLOY_IMAGE=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" >> $BASH_ENV
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build_image:
          push_image: true
          account_id: $AWS_ECR_REGISTRY_ID
          tag: $BUILD_TAGS
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
      # Validate the python version as 3.8
      - run:
          name: Validate Python version
          command: |
            docker run --rm --tty --interactive $ECR_DEPLOY_IMAGE python --version | grep "3.8"

  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 laalaa
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check --skip-string-normalization laalaa
  test:
    docker:
      - image: circleci/python:3.7
      - image: cimg/postgres:14.9-postgis
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            sudo apt-get update && sudo apt-get install gdal-bin
            pip install virtualenv
            virtualenv env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
            - pip-v1-
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/base.txt --requirement requirements/dev.txt
            pip check
      - save_cache:
          key: pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            coverage run manage.py test --verbosity=2
            coverage report -m
            coverage html
            coveralls
      - store_artifacts:
          path: htmlcov
          destination: coverage
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  image_security_scan:
    executor: aws-ecr/default # use the aws-ecr/default executor to start the docker daemon
    steps:
      # Checkout your repository
      - checkout
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command
      - run:
          name: Create target tags
          command: |
            source .circleci/define_build_environment_variables
            echo "export ECR_DEPLOY_IMAGE=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" >> $BASH_ENV
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

      - run:
          name: Install trivy
          command: |
            sudo apt-get update
            sudo apt-get install -y curl wget
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )

            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            sudo mv trivy /usr/local/bin
      - run:
          name: Pull down image
          command: |
            source .circleci/define_build_environment_variables
            docker pull ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for vulnerabilities (informative, non-breaking)
          command: |
            source .circleci/define_build_environment_variables
            trivy image --exit-code 0 --severity UNKNOWN,LOW,MEDIUM,HIGH --no-progress ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for breaking vulnerabilities
          command: |
            source .circleci/define_build_environment_variables
            trivy image --exit-code 1 --severity CRITICAL --no-progress ${ECR_DEPLOY_IMAGE}

  deploy:
    parameters:
      environment:
        type: string
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_SERVER_ADDRESS}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=${K8S_NAMESPACE} get pods
      - deploy:
          name: Deploy to << parameters.environment >>
          command: |
            .circleci/deploy_to_kubernetes << parameters.environment >>
      - slack/status

  deploy_grafana:
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_SERVER_ADDRESS}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
            kubectl config use-context ${K8S_CLUSTER_NAME}
      - run:
          name: Deploy Grafana Dashboards
          command: |
            kubectl apply -f ./kubernetes_deploy/staging/ingress-dashboard.yml
            kubectl apply -f ./kubernetes_deploy/staging/pods-dashboard.yml

# ------------------
#
#WORKFLOWS
#
# ------------------

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - test
      - build:
          requires:
            - lint
            - test
      - image_security_scan:
          requires:
            - build

      - staging_deploy_approval:
          type: approval
          requires:
            - build

      - deploy:
          name: staging_deploy_live
          environment: staging
          requires:
            - staging_deploy_approval
          context:
            - laa-legal-adviser-api-live-staging

      - deploy_grafana:
          name: deploy_grafana
          requires:
            - staging_deploy_approval
          context:
            - laa-legal-adviser-api-live-staging

      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy_live
            - image_security_scan
          filters:
            branches:
                only:
                    - master

      - deploy:
          name: production_deploy_live
          environment: production
          requires:
            - production_deploy_approval
          context:
            - laa-legal-adviser-api-live-production