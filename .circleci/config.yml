version: 2.1
orbs:
  slack: circleci/slack@2.5.0
jobs:
  build:
    docker:
      - image: docker:18.09.3-git
    steps:
      - checkout
      - setup_remote_docker:
          version: "18.09.3"
          docker_layer_caching: true
      - run:
          name: Login to the Docker registry
          command: |
            apk add --no-cache --no-progress py2-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
            ${ecr_login}
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
      - run:
          name: Validate Python version
          command: docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "3.7"
      - run:
          name: Tag and push Docker images
          command: .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1 ${ECR_DOCKER_REPO_BASE}
  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8
          command: |
            source lint-env/bin/activate
            flake8 laalaa
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check --skip-string-normalization laalaa
  test:
    docker:
      - image: circleci/python:3.7
      - image: circleci/postgres:11-alpine-postgis
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            sudo apt-get update && sudo apt-get install python-gdal
            pip install virtualenv
            virtualenv env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
            - pip-v1-
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/base.txt --requirement requirements/dev.txt
            pip check
      - save_cache:
          key: pip-v1-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/dev.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            coverage run manage.py test --verbosity=2
            coverage report -m
            coverage html
            coveralls
      - store_artifacts:
          path: htmlcov
          destination: coverage
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  image_security_scan:
    docker:
      - image: docker:18.09.3-git
    steps:
      - setup_remote_docker:
          version: "18.09.3"
      - checkout
      - run:
          name: Login to the Docker registry
          command: |
            apk add --no-cache --no-progress py2-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
            ${ecr_login}
      - run:
          name: Install trivy
          command: |
            apk add --update curl
            VERSION=$(
                curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | \
                grep '"tag_name":' | \
                sed -E 's/.*"v([^"]+)".*/\1/'
            )

            wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
            tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
            mv trivy /usr/local/bin
      - run:
          name: Pull down image
          command: |
            source .circleci/define_build_environment_variables
            docker pull ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for vulnerabilities (informative, non-breaking)
          command: |
            source .circleci/define_build_environment_variables
            trivy --exit-code 0 --severity UNKNOWN,LOW,MEDIUM,HIGH --no-progress ${ECR_DEPLOY_IMAGE}
      - run:
          name: Scan for breaking vulnerabilities
          command: |
            source .circleci/define_build_environment_variables
            trivy --exit-code 1 --severity CRITICAL --no-progress ${ECR_DEPLOY_IMAGE}

  staging_deploy:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
    steps:
      - checkout
      - run:
          name: Initialise Kubernetes staging context
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - deploy:
          name: Deploy laalaa to staging
          command: |
            .circleci/deploy_to_kubernetes database-migration-staging
      - slack/status

  production_deploy:
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
    steps:
      - checkout
      - run:
          name: Initialise Kubernetes production context
          command: |
            setup-kube-auth
            kubectl config use-context production
      - deploy:
          name: Deploy laalaa to production
          command: |
            .circleci/deploy_to_kubernetes production
      - slack/status

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - test
      - build:
          requires:
            - lint
            - test
      - image_security_scan:
          requires:
            - build
      - staging_deploy_approval:
          type: approval
          requires:
            - build
      - staging_deploy:
          requires:
            - staging_deploy_approval
      - production_deploy_approval:
          type: approval
          requires:
            - staging_deploy
            - image_security_scan
          filters:
            branches:
                only:
                    - master
      - production_deploy:
          requires:
            - production_deploy_approval
